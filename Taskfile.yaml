version: '3'

silent: true

env:
  HOST_USR:
    sh: whoami
  HOST_UID:
    sh: id -u
  HOST_GID:
    sh: id -g
  HOST_ID: '{{.HOST_UID}}:{{.HOST_GID}}'

  PROJECT_NAME:
    sh: basename "$PWD"

  DOCKER_NETWORK: '{{.PROJECT_NAME}}.network'

  ENV_ROOT_PATH:
    sh: realpath ./env
  INFRA_BASE_PATH:
    sh: realpath ./infra
  SRC_BASE_PATH:
    sh: realpath ./src
  INFRA_DOCKER_PATH:
    sh: realpath ./infra/docker


dotenv: ['{{.ENV_ROOT_PATH}}/project.env']


includes:
  dust:
    taskfile: ./Taskfile.dust.yaml


tasks:

  default:
    summary: |
      Available Task list.
    cmds:
      - task --list

  ## Infrastructure
  ##################

  infra-up:
    desc: Start infrastructure services.
    cmds:
      - '{{.DOCKER_COMPOSE}} up -d --remove-orphans --build'
      - '{{.EXEC_LOG}} DONE "Infrastructure is up and running."'

  infra-stop:
    desc: Stop infrastructure services.
    cmds:
      - '{{.DOCKER_COMPOSE}} stop'
      - '{{.EXEC_LOG}} DONE "Infrastructure has been stopped."'

  infra-restart:
    desc: Restart infrastructure services.
    cmds:
      - task: infra-stop
      - task: infra-up

  infra-init:
    desc: "Start services and initialize environment."
    summary: |
      WARNING: requires `host-init` to have been run first.
    cmds:
      - mkdir -p "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/pgsql"
      - mkdir -p "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/redis"
      - mkdir -p "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/elasticsearch"
      - mkdir -p "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/qdrant"
      - mkdir -p "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/backend-home"
      - task: infra-up
      - task: dust:init
      - '{{.EXEC_LOG}} DONE "Environment initialized."'

  infra-clean:
    desc: Reset infrastructure and remove persistent data.
    cmds:
      - task: dust:clean
      - sudo rm -rf "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/pgsql"
      - sudo rm -rf "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/redis"
      - sudo rm -rf "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/elasticsearch"
      - sudo rm -rf "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/qdrant"
      - sudo rm -rf "{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data/backend-home"
      - '{{.EXEC_LOG}} DONE "Persistent infrastructure data has been cleaned."'

  infra-reset:
    desc: Fully reset infrastructure to a clean install.
    cmds:
      - task: infra-clean
      - task: infra-init

  infra-ps:
    desc: List running infrastructure services.
    cmds:
      - '{{.DOCKER_COMPOSE}} ps'


  ## Environment
  ###############

  env-config-edit:
    desc: "Open local env config files in editor."
    cmds:
      - '{{.EXEC_LOG}} ACTION "Opening local env config in $EDITOR"'
      - $EDITOR {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/*.env
      - '{{.EXEC_LOG}} DONE "Local env config opened."'

  env-config-prepare:
    desc: "Initialize local environment configuration from default or local templates."
    cmds:
      - |
        read -p "Which template to copy? (default / local / other) [default]: " val
        TEMPLATE_ENV="${val:-default}"
        TEMPLATE_PATH="{{.INFRA_BASE_PATH}}/configuration/${TEMPLATE_ENV}"

        if [ ! -d "$TEMPLATE_PATH" ]; then
          {{.EXEC_LOG}} ERROR "Template '$TEMPLATE_ENV' does not exist in 'configuration/'."
          exit 1
        fi

        if [ "$TEMPLATE_ENV" = "backup" ]; then
          {{.EXEC_LOG}} ERROR "'backup' is a reserved keyword and cannot be used as a template."
          exit 1
        fi

        {{.EXEC_LOG}} ACTION "Copying environment template from '$TEMPLATE_PATH' to '{{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/'"
        mkdir -p {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/data
        cp -r "$TEMPLATE_PATH"/* {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/

        {{.EXEC_LOG}} DONE "Environment configuration prepared from '$TEMPLATE_ENV' template."

  env-backup:
    desc: "Backup the current environment state."
    cmds:
      - '{{.EXEC_LOG}} ACTION "Starting backup of environment {{.DEPLOY_ENV}}"'
      - |
          SRC={{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}
          DEST={{.ENV_ROOT_PATH}}/backup/{{.DEPLOY_ENV}}
          if [ -d "$SRC" ]; then \
            if [ "$(ls -A $SRC)" ]; then \
              mkdir -p "$DEST" && \
              cp -r "$SRC"/* "$DEST" && \
              {{.EXEC_LOG}} DONE "Backup completed at $DEST." ; \
            else \
              {{.EXEC_LOG}} NOTICE "Environment folder is empty, no files to backup." ; \
            fi \
          else \
            {{.EXEC_LOG}} ERROR "No environment found to backup: $SRC" ; \
          fi

  env-restore:
    desc: "Restore environment from backup."
    cmds:
      - |
        {{.EXEC_LOG}} ACTION "Restoring environment '{{.DEPLOY_ENV}}' from backup..."
        rm -rf {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}
        mkdir -p {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}
        cp -r {{.ENV_ROOT_PATH}}/backup/{{.DEPLOY_ENV}}/* {{.ENV_ROOT_PATH}}/{{.DEPLOY_ENV}}/
        {{.EXEC_LOG}} DONE "Environment restored from backup."

  env-clean:
    desc: "Delete current environment data and config, excluding backup, .gitignore, and project.*"
    cmds:
      # Step 1: Call the env-backup task to create a backup if necessary
      - task: env-backup

      # Step 2: Delete all files and directories except for backup, .gitignore, and project.*
      - '{{.EXEC_LOG}} ACTION "Deleting environment folder {{.ENV_ROOT_PATH}} except for backup, .gitignore, and project.*"'
      - "find {{.ENV_ROOT_PATH}} -mindepth 1 \
          ! -path '{{.ENV_ROOT_PATH}}/backup/*' \
          ! -name 'backup' \
          ! -name '.gitignore' \
          ! -name 'project.*' \
          -exec rm -rf {} +"  # Remove contents except for backup, .gitignore, and project.*

      - '{{.EXEC_LOG}} DONE "Environment folder cleaned, excluding backup, .gitignore, and project.*."'


  ## Host
  ########

  host-clean:
    desc: "WARNING: Clean host (containers, volumes, networks)."
    cmds:
      - docker ps -aq | xargs -r docker stop
      - docker ps -aq | xargs -r docker rm -v
      - docker volume ls -q | xargs -r docker volume rm
      - docker network ls -q --filter type=custom | xargs -r docker network rm
      - '{{.EXEC_LOG}} DONE "Host cleaned (containers, volumes, networks)."'
    silent: false

  host-reset:
    desc: "WARNING: Reset host (containers, images, builders, system)."
    cmds:
      - task: host-clean
      - docker images -aq | xargs -r docker rmi -f
      - docker builder prune -f
      - docker system prune -a -f
      - '{{.EXEC_LOG}} DONE "Host reset complete."'
    silent: false

  host-init:
    desc: "Initialize host setup (submodules, configs)."
    cmds:
      - git submodule update --init --recursive
      - '{{.EXEC_LOG}} DONE "Git submodules initialized."'


  ## Diagnostic
  ##############

  log-host.env:
    desc: Log host environment.
    summary: |
      WARNING: May print sensitive variables. Use in development only.
    cmds:
      - printenv | sort

  log-host.system:
    desc: Log system diagnostics.
    cmds:
      - docker info
      - df -h
      - docker system df

  log-infra:
    desc: Show infrastructure logs.
    cmds:
      - '{{.DOCKER_COMPOSE}} logs -f --tail=100'
