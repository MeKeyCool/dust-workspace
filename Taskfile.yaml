version: '3'

silent: true


# 1. Load .env file before vars evaluation
dotenv: ['env/project.env']


# 2. Evaluate Taskfile internal vars
vars:
  DSW_PROJECT_NAME:
    sh: basename "$PWD"
  
  DSW_DOCKER_NETWORK:
    sh: echo "{{.DSW_PROJECT_NAME}}.network"
  DSW_DOCKER_GATEWAY_IP:
    sh: ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+' | head -n1
  DSW_KUBE_CLUSTER_NAME:
    sh: echo "{{.DSW_PROJECT_NAME}}-cluster"
  DSW_INFRA_KUBECONFIG_PATH:
    sh: echo "{{.DSW_ENV_PATH}}/data/kube/config"

  DSW_ENV_ROOT_PATH:
    sh: realpath ./env
  DSW_ENV_PATH:
    sh: echo "$(realpath ./env)/{{.DSW_DEPLOY_ENV}}"
  
  DSW_SRC_BASE_PATH:
    sh: realpath ./src
  
  DSW_INFRA_BASE_PATH:
    sh: realpath ./infra
  DSW_INFRA_DOCKER_PATH:
    sh: realpath ./infra/docker
  DSW_INFRA_KUBE_PATH:
    sh: realpath ./infra/kubernetes
  
  DSW_HOST_USR:
    sh: whoami
  DSW_HOST_UID:
    sh: id -u
  DSW_HOST_GID:
    sh: id -g
  DSW_HOST_ID:
    sh: echo "$(id -u):$(id -g)"

  DUST_DATABASES:
    - dust
    - dust_test
    - dust_api
    - dust_databases_store
    - dust_front
    - dust_front_test
    - dust_connectors
    - dust_connectors_test
    - dust_oauth


# 3. Export vars to task env
env:
  DSW_PROJECT_NAME: '{{.DSW_PROJECT_NAME}}'

  DSW_DOCKER_NETWORK: '{{.DSW_DOCKER_NETWORK}}'
  DSW_DOCKER_GATEWAY_IP: '{{.DSW_DOCKER_GATEWAY_IP}}'
  DSW_KUBE_CLUSTER_NAME: '{{.DSW_KUBE_CLUSTER_NAME}}'
  DSW_INFRA_KUBECONFIG_PATH: '{{.DSW_INFRA_KUBECONFIG_PATH}}'

  DSW_ENV_ROOT_PATH: '{{.DSW_ENV_ROOT_PATH}}'
  DSW_ENV_PATH: '{{.DSW_ENV_PATH}}'
  
  DSW_SRC_BASE_PATH: '{{.DSW_SRC_BASE_PATH}}'
  
  DSW_INFRA_BASE_PATH: '{{.DSW_INFRA_BASE_PATH}}'
  DSW_INFRA_DOCKER_PATH: '{{.DSW_INFRA_DOCKER_PATH}}'
  DSW_INFRA_KUBE_PATH: '{{.DSW_INFRA_KUBE_PATH}}'
  
  DSW_HOST_USR: '{{.DSW_HOST_USR}}'
  DSW_HOST_UID: '{{.DSW_HOST_UID}}'
  DSW_HOST_GID: '{{.DSW_HOST_GID}}'
  DSW_HOST_ID: '{{.DSW_HOST_ID}}'


includes:
  app:
    taskfile: ./Taskfile.app.yaml
  infra:
    taskfile: ./Taskfile.infra.yaml


tasks:

  default:
    summary: |
      Available Task list.
    cmds:
      - task --list

  ###############
  ## Environment
  ###############

  env-config-edit:
    desc: "Open local environment config files in editor."
    cmds:
      - '{{.DSW_EXEC_LOG}} ACTION "Opening local env config in $EDITOR"'
      - $EDITOR {{.DSW_ENV_PATH}}/*.env
      - '{{.DSW_EXEC_LOG}} DONE "Local env config opened."'

  # TODO : if configuration exists already, backup it before apply 
  env-config-prepare:
    desc: "Initialize local environment configuration from template."
    cmds:
      - |
        read -p "Which template to copy? (default / local / other) [default]: " val
        TEMPLATE_ENV="${val:-default}"
        TEMPLATE_PATH="{{.DSW_INFRA_BASE_PATH}}/configuration/${TEMPLATE_ENV}"

        if [ ! -d "$TEMPLATE_PATH" ]; then
          {{.DSW_EXEC_LOG}} ERROR "Template '$TEMPLATE_ENV' does not exist."
          exit 1
        fi

        if [ "$TEMPLATE_ENV" = "backup" ]; then
          {{.DSW_EXEC_LOG}} ERROR "'backup' is a reserved keyword."
          exit 1
        fi

        {{.DSW_EXEC_LOG}} ACTION "Copying template from '$TEMPLATE_PATH' to '{{.DSW_ENV_PATH}}/'"
        mkdir -p {{.DSW_ENV_PATH}}
        cp -r "$TEMPLATE_PATH"/* {{.DSW_ENV_PATH}}/

        {{.DSW_EXEC_LOG}} DONE "Environment configuration prepared."

  env-backup:
    desc: "Backup current environment configuration."
    cmds:
      - '{{.DSW_EXEC_LOG}} ACTION "Backing up env \"{{.DSW_DEPLOY_ENV}}\""'
      - |
          SRC={{.DSW_ENV_PATH}}
          DEST={{.DSW_ENV_ROOT_PATH}}/backup/{{.DSW_DEPLOY_ENV}}
          if [ -d "$SRC" ]; then \
            if [ "$(ls -A $SRC)" ]; then \
              mkdir -p "$DEST" && \
              cp -r "$SRC"/* "$DEST" && \
              {{.DSW_EXEC_LOG}} DONE "Backup complete at $DEST." ; \
            else \
              {{.DSW_EXEC_LOG}} NOTICE "No files to backup." ; \
            fi \
          else \
            {{.DSW_EXEC_LOG}} ERROR "Source directory not found: $SRC" ; \
          fi

  env-restore:
    desc: "Restore environment from backup."
    cmds:
      - '{{.DSW_EXEC_LOG}} ACTION "Restoring environment \"{{.DSW_DEPLOY_ENV}}\" from backup..."'
      - rm -rf {{.DSW_ENV_PATH}}
      - mkdir -p {{.DSW_ENV_PATH}}
      - cp -r {{.DSW_ENV_ROOT_PATH}}/backup/{{.DSW_DEPLOY_ENV}}/* {{.DSW_ENV_PATH}}/
      - '{{.DSW_EXEC_LOG}} DONE "Environment restored."'

  env-clean:
    desc: "Clean environment folder (excluding backup, .gitignore, and project.*)."
    cmds:
      - task: env-backup
      - '{{.DSW_EXEC_LOG}} ACTION "Cleaning environment folder."'
      - "find {{.DSW_ENV_ROOT_PATH}} -mindepth 1 \\
          ! -path '{{.DSW_ENV_ROOT_PATH}}/backup/*' \\
          ! -name 'backup' \\
          ! -name '.gitignore' \\
          ! -name 'project.*' \\
          -exec rm -rf {} +"
      - '{{.DSW_EXEC_LOG}} DONE "Environment folder cleaned."'

  #########################################################
  ## Phase 0: Preparation (static, no containers required)
  #########################################################

  prep:
    desc: "Prepare full host and project environment (no containers running)."
    cmds:
      - task: infra:prep
      - task: app:prep
      - '{{.DSW_EXEC_LOG}} DONE "All services prepared (env, volumes, folders)."'

  purge:
    desc: "Purge host and project (undo all preparation)."
    cmds:
      - task: app:purge
      - task: infra:purge
      - '{{.DSW_EXEC_LOG}} DONE "All preparation purged."'

  rebase:
    desc: "Reset full environment (purge + prep). Must be run when no containers are running."
    status:
      - test -z "$(docker ps -q)"
    cmds:
      - task: purge
      - task: prep

  #########################################
  ## Phase 1: Runtime control (containers)
  #########################################

  up:
    desc: "Start all containers (infra and app)."
    status:
      - docker ps --filter "name={{.DSW_PROJECT_NAME}}" --filter status=running | grep -qE "infra|app"
    cmds:
      - task: infra:up
      - task: app:up
      - '{{.DSW_EXEC_LOG}} DONE "All containers started."'

  down:
    desc: "Stop all containers."
    cmds:
      - task: app:down
      - task: infra:down
      - '{{.DSW_EXEC_LOG}} DONE "All containers stopped."'

  restart:
    desc: "Restart all containers (infra + app)."
    cmds:
      - task: down
      - task: up

  #########################################################
  ## Phase 2: Initialization (requires running containers)
  #########################################################

  init:
    desc: "Initialize services (DBs, indexes, builds, etc)."
    cmds:
      - task: infra:init
      - task: app:init
      - task: db-app-init
      - '{{.DSW_EXEC_LOG}} DONE "Infra and app fully initialized."'

  clean:
    desc: "Clean all services (infra and app)."
    cmds:
      - task: db-app-clean
      - task: app:clean
      - task: infra:clean
      - '{{.DSW_EXEC_LOG}} DONE "All services cleaned."'

  reset:
    desc: "Reset application state (clean then init)."
    cmds:
      - task: clean
      - task: init


  ###############################################
  # Cross-cutting tasks (infra + app coordination)
  ###############################################

  test:
    cmds:
      - |
        {{.DSW_DOCKER_COMPOSE}} exec -T dust_db sh -c 'echo "POSTGRES_USER=$POSTGRES_USER"'
      - |
        {{.DSW_DOCKER_COMPOSE}} exec -T dust_db psql -U dev -d postgres -c '\du'

  db-app-init:
    desc: "Provision databases + build backend init logic + init front DBs"
    cmds:
      - '{{.DSW_EXEC_LOG}} ACTION "Creating test user in Postgres..."'
      - |
        {{.DSW_DOCKER_COMPOSE}} exec -T dust_db sh -c '
          USER_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='\''test'\''");
          if [ "$USER_EXISTS" != "1" ]; then
            echo "Creating user '\''test'\''...";
            psql -U "$POSTGRES_USER" -d postgres -c "CREATE USER test WITH PASSWORD '\''test'\'' CREATEDB;";
          else
            echo "User '\''test'\'' already exists.";
          fi
        '

      - '{{.DSW_EXEC_LOG}} ACTION "Creating application databases if needed..."'
      - for: { var: DUST_DATABASES }
        cmd: |
          {{.DSW_DOCKER_COMPOSE}} exec -T dust_db sh -c '
            DB_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='\''{{.ITEM}}'\''");
            if [ "$DB_EXISTS" != "1" ]; then
              echo "Creating database {{.ITEM}}...";
              psql -U "$POSTGRES_USER" -d postgres -c "CREATE DATABASE \"{{.ITEM}}\" OWNER test;";
            else
              echo "Database {{.ITEM}} already exists.";
            fi
          '

      - '{{.DSW_EXEC_LOG}} ACTION "Building backend init binary..."'
      - '{{.DSW_DOCKER_COMPOSE}} exec dust_backend cargo build --bin init_db'

      - '{{.DSW_EXEC_LOG}} ACTION "Initializing front dev database..."'
      - |
        {{.DSW_DOCKER_COMPOSE}} exec dust_front zsh -c "cd front && npx tsx admin/db.ts"
      - '{{.DSW_EXEC_LOG}} DONE "Front dev database initialized."'

      - '{{.DSW_EXEC_LOG}} ACTION "Initializing front test database..."'
      - |
        {{.DSW_DOCKER_COMPOSE}} exec \
          -e NODE_ENV=test -e FRONT_DATABASE_URI=postgres://test:test@dust_db:5432/dust_front_test \
          dust_front zsh -c "cd front && npx tsx admin/db.ts"
      - '{{.DSW_EXEC_LOG}} DONE "Front test database initialized."'

      - '{{.DSW_EXEC_LOG}} DONE "App databases ready."'


  db-app-clean:
    desc: "Drop PostgreSQL databases and user test."
    cmds:
      - for: 
          var: DUST_DATABASES
        cmd: |
          {{.DSW_EXEC_LOG}} ACTION "Dropping database {{.ITEM}} if exists"
          {{.DSW_DOCKER_COMPOSE}} exec -T dust_db sh -c 'psql -U "$POSTGRES_USER" -d postgres -c "DROP DATABASE IF EXISTS {{.ITEM}};"'
      - '{{.DSW_EXEC_LOG}} ACTION "Dropping user \"test\" if exists"'
      - |
        {{.DSW_DOCKER_COMPOSE}} exec -T dust_db sh -c '
          USER_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='\''test'\''");
          if [ "$USER_EXISTS" = "1" ]; then
            psql -U "$POSTGRES_USER" -d postgres -c "DROP ROLE test;";
            echo "User '\''test'\'' dropped.";
          else
            echo "User '\''test'\'' does not exist.";
          fi
        '
      - '{{.DSW_EXEC_LOG}} DONE "Databases and user \"test\" cleaned."'

  db-app-reset:
    desc: "Reinitialize all app databases"
    cmds:
      - task: db-app-clean
      - task: db-app-init


  ########
  ## Host
  ########

  host-clean:
    desc: "WARNING: Clean host (containers, volumes, networks)."
    cmds:
      - cmd: task clean
        ignore_error: true
      - docker ps -aq | xargs -r docker stop
      - docker ps -aq | xargs -r docker rm -v
      - docker volume ls -q | xargs -r docker volume rm
      - docker network ls -q --filter type=custom | xargs -r docker network rm
      - '{{.DSW_EXEC_LOG}} DONE "Host cleaned (containers, volumes, networks)."'
    silent: false

  host-purge:
    desc: "WARNING: Full system purge (containers, images, cache, volumes)."
    summary: |
      Optionally accepts a 'purgeEnv=true' variable.
      If 'purgeEnv' is set to true, also runs `task env-clean` (which removes env configuration).
    vars:
      purgeEnv: false
    cmds:
      - task: host-clean
      - cmd: task purge
        ignore_error: true
      - |
        if {{ .purgeEnv }}; then
          {{ .EXEC_LOG }} ACTION "Running env-clean due to purgeEnv=true"
          task env-clean
        fi
      - docker images -aq | xargs -r docker rmi -f
      - docker builder prune -f
      - docker system prune -a -f
      - '{{.DSW_EXEC_LOG}} DONE "Host reset complete."'
    silent: false

  host-init:
    desc: "Initialize Git submodules and prepare environment configurations."
    status:
      # Skip this task if the Dust submodule has already been initialized
      # (i.e., the .git metadata exists and the folder is not empty)
      - test -f src/dust/.git || [ -d src/dust/.git ] && [ "$(ls -A src/dust)" ]
    cmds:
      - git submodule update --init --recursive
      - '{{.DSW_EXEC_LOG}} DONE "Git submodules initialized."'
      - task: env-config-prepare

  ##################
  ## Full Bootstrap
  ##################

  bootstrap:
    desc: "Run full bootstrap (prep + up + init)."
    cmds:
      - task: host-init
      - task: prep
      - task: up
      - task: init

  ##############
  ## Diagnostic
  ##############

  status-all:
    desc: "Display status of all key phases (prep, up, init)."
    cmds:
      - echo -e "\nChecking prep:"
      - if test -d {{.DSW_ENV_PATH}} && test -d {{.DSW_ENV_PATH}}/data; then echo -e "\t✅ prep ready"; else echo -e "\t❌ prep not ready"; fi
      - echo -e "\nChecking up (containers running):"
      - if docker ps --filter "name={{.DSW_PROJECT_NAME}}" --filter status=running | grep -qE "infra|app"; then echo -e "\t✅ containers running"; else echo -e "\t❌ containers not running"; fi
      - echo -e "\nChecking init (at least one container):"
      - if test -n "$(docker ps -q)"; then echo -e "\t✅ containers present"; else echo -e "\t❌ no containers"; fi

  log-env:
    desc: "Print environment variables (development only)."
    summary: "WARNING: May print sensitive variables."
    cmds:
      - printenv | grep DSW_* | sort

  log-system:
    desc: "Display system diagnostics."
    cmds:
      - docker info
      - df -h
      - docker system df
