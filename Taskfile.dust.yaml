version: '3'

vars:
  DUST_DATABASES:
    - dust
    - dust_test
    - dust_api
    - dust_databases_store
    - dust_front
    - dust_front_test
    - dust_connectors
    - dust_connectors_test
    - dust_oauth

tasks:

  reset:
    desc: Clean and initialize all subprojects.
    deps:
      - clean
      - init

  ## CLEAN
  ##########

  clean-paths:
    internal: true
    desc: "Delete a list of paths if they exist."
    vars:
      paths: []
    cmds:
      - for: { var: paths }
        cmd: '[ -d {{.ITEM}} ] && rm -rf {{.ITEM}} || true'

  clean:
    desc: Clean all artifacts (Rust, Node, builds).
    deps:
      - clean-backend
      - clean-sdk-js
      - clean-sparkle
      - clean-front
      - clean-databases
      - clean-caches

  clean-backend:
    desc: Clean Rust compilation.
    cmds:
      - task: clean-paths
        vars:
          paths:
            - '{{.SRC_BASE_PATH}}/dust/core/target'
      - '{{.EXEC_LOG}} DONE "Rust build artifacts cleaned."'

  clean-sdk-js:
    desc: Clean JS SDK.
    cmds:
      - task: clean-paths
        vars:
          paths:
            - '{{.SRC_BASE_PATH}}/dust/sdks/js/node_modules'
            - '{{.SRC_BASE_PATH}}/dust/sdks/js/dist'
      - '{{.EXEC_LOG}} DONE "SDK JS cleaned."'

  clean-sparkle:
    desc: Clean Sparkle library.
    cmds:
      - task: clean-paths
        vars:
          paths:
            - '{{.SRC_BASE_PATH}}/dust/sparkle/node_modules'
            - '{{.SRC_BASE_PATH}}/dust/sparkle/dist'
            - '{{.SRC_BASE_PATH}}/dust/sparkle/.storybook-out'
      - '{{.EXEC_LOG}} DONE "Sparkle build artifacts cleaned."'

  clean-front:
    desc: Clean Next.js frontend.
    cmds:
      - task: clean-paths
        vars:
          paths:
            - '{{.SRC_BASE_PATH}}/dust/front/.next'
            - '{{.SRC_BASE_PATH}}/dust/front/node_modules'
      - '{{.EXEC_LOG}} DONE "Frontend artifacts cleaned."'

  clean-databases:
    desc: Drop all PostgreSQL databases and test user.
    cmds:
      - for: { var: database, list: "{{.DUST_DATABASES}}" }
        cmd: |
          {{.EXEC_LOG}} ACTION "Dropping database {{.database}} if exists"
          {{.DOCKER_COMPOSE}} exec -T dust_db sh -c 'psql -U "$POSTGRES_USER" -d postgres -c "DROP DATABASE IF EXISTS {{.database}};"'
      - '{{.EXEC_LOG}} ACTION "Dropping user \"test\" if exists"'
      - |
        {{.DOCKER_COMPOSE}} exec -T dust_db sh -c '
          USER_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='\''test'\''");
          if [ "$USER_EXISTS" = "1" ]; then
            psql -U "$POSTGRES_USER" -d postgres -c "DROP ROLE test;";
            echo "User '\''test'\'' dropped.";
          else
            echo "User '\''test'\'' does not exist.";
          fi
        '
      - '{{.EXEC_LOG}} DONE "Databases and user \"test\" cleaned."'

  clean-caches:
    desc: Remove global cache directories.
    cmds:
      - 'find {{.SRC_BASE_PATH}}/dust -type d -name ".turbo" -exec rm -rf {} + || true'
      - 'find {{.SRC_BASE_PATH}}/dust -type d -name ".cache" -exec rm -rf {} + || true'
      - 'find {{.SRC_BASE_PATH}}/dust -type d -name "coverage" -exec rm -rf {} + || true'
      - '{{.EXEC_LOG}} DONE "Global caches removed."'


  ## INIT
  ##########

  init:
    desc: Initialize full Dust stack.
    deps:
      - init-backend
      - init-infra
      - init-sdk-js
      - init-front
      - init-sparkle

  init-infra:
    desc: Init PostgreSQL, Qdrant, Elasticsearch.
    cmds:
      - task: init-databases
      - task: init-qdrant
        ignore_error: true
      - task: init-elasticsearch
        ignore_error: true
      - '{{.EXEC_LOG}} DONE "Infrastructure services initialized."'

  init-backend:
    desc: Build Rust and init DB.
    deps:
      - init-databases
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_backend cargo build'
      - '{{.EXEC_LOG}} ACTION "Initializing dev database"'
      - |
        {{.DOCKER_COMPOSE}} exec -it dust_backend cargo run --bin init_db
      - '{{.EXEC_LOG}} DONE "Backend built and database initialized."'

  init-sdk-js:
    desc: Install JS SDK dependencies.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd sdks/js && npm install"'
      - '{{.EXEC_LOG}} DONE "JS SDK initialized."'

  init-sparkle:
    desc: Install Sparkle dependencies.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd sparkle && npm install"'
      - '{{.EXEC_LOG}} DONE "Sparkle initialized."'

  init-front:
    desc: Install frontend dependencies.
    deps:
      - init-sdk-js
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd front && npm install --ignore-scripts"'
      - '{{.EXEC_LOG}} DONE "Frontend initialized."'

  init-databases:
    desc: Create PostgreSQL databases and test user.
    cmds:
      - '{{.EXEC_LOG}} DONE "Checking user \"test\"..."'
      - |
        {{.DOCKER_COMPOSE}} exec -T dust_db sh -c '
          USER_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='\''test'\''");
          if [ "$USER_EXISTS" != "1" ]; then
            echo "Creating user '\''test'\''...";
            psql -U "$POSTGRES_USER" -d postgres -c "CREATE USER test WITH PASSWORD '\''test'\'' CREATEDB;";
          else
            echo "User '\''test'\'' already exists.";
          fi
        '
      - for: { var: DUST_DATABASES }
        cmd: |
          {{.DOCKER_COMPOSE}} exec -T dust_db sh -c '
            DB_EXISTS=$(psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='\''{{.ITEM}}'\''");
            if [ "$DB_EXISTS" != "1" ]; then
              echo "Creating database {{.ITEM}}...";
              psql -U "$POSTGRES_USER" -d postgres -c "CREATE DATABASE \"{{.ITEM}}\" OWNER test;";
            else
              echo "Database {{.ITEM}} already exists.";
            fi
          '
      - '{{.DOCKER_COMPOSE}} exec dust_backend cargo build --bin init_db'
      - '{{.EXEC_LOG}} DONE "PostgreSQL databases ready."'

  init-qdrant:
    desc: Init Qdrant collections.
    cmds:
      - |
        {{.DOCKER_COMPOSE}} exec -T dust_backend script -q -c \
          "echo y | cargo run --bin qdrant_create_collection -- --cluster cluster-0 --provider openai --model text-embedding-3-large-1536" /dev/null
      - '{{.EXEC_LOG}} DONE "Qdrant collections initialized."'

  init-elasticsearch:
    desc: Init Elasticsearch indices.
    vars:
      INDICES:
        - name: data_sources_nodes
          version: 4
        - name: data_sources
          version: 1
    cmds:
      - for: { var: INDICES }
        cmd: |
          {{.DOCKER_COMPOSE}} exec -T dust_backend sh -c '
            INDEX_NAME="{{.ITEM.name}}"
            INDEX_VERSION={{.ITEM.version}}
            FULL_INDEX="core.${INDEX_NAME}_${INDEX_VERSION}"
            status=$(curl -s -o /dev/null -w "%{http_code}" -I "http://dust-elasticsearch:9200/${FULL_INDEX}")
            if [ "$status" = "200" ]; then
              echo "Index ${FULL_INDEX} already exists."
            else
              echo "Creating index ${FULL_INDEX}..."
              cargo run --bin elasticsearch_create_index -- --index-name "$INDEX_NAME" --index-version "$INDEX_VERSION" --skip-confirmation
              echo "Index ${FULL_INDEX} created."
            fi
          '
      - '{{.EXEC_LOG}} DONE "Elasticsearch indices initialized."'

  ## BUILD
  ##########

  build:
    desc: Build backend, SDK, Sparkle and frontend.
    deps:
      - build-backend
      - build-sdk-js
      - build-sparkle
      - build-front

  build-backend:
    desc: Build Rust backend.
    deps:
      - init-backend
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_backend cargo build'
      - '{{.EXEC_LOG}} DONE "Backend built."'

  build-sdk-js:
    desc: Build JS SDK.
    deps:
      - init-sdk-js
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd sdks/js && npm run build"'
      - '{{.EXEC_LOG}} DONE "SDK JS built."'

  build-sparkle:
    desc: Build Sparkle (Design System).
    deps:
      - init-sparkle
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd sparkle && npm run build"'
      - '{{.EXEC_LOG}} DONE "Sparkle built."'

  build-front:
    desc: Build frontend Next.js.
    deps:
      - init-front
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd front && npm run build"'
      - '{{.EXEC_LOG}} DONE "Frontend built."'

  ## RUN
  ########

  run-backend:
    desc: Run backend API.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_backend cargo run --bin core-api'

  run-front:
    desc: Run frontend (dev mode).
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd front && npm run dev"'

  start-front:
    desc: Serve built frontend.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh -c "cd front && npm run start"'

  ## SHELL
  ###########

  shell-backend:
    desc: Open shell in backend container.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_backend bash'

  shell-front:
    desc: Open shell in frontend container.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_front zsh'

  shell-database:
    desc: Open shell in database container.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_db bash'

  shell-elasticsearch:
    desc: Open shell in Elasticsearch container.
    cmds:
      - '{{.DOCKER_COMPOSE}} exec -it dust_elasticsearch bash'

  ## TEST
  ########

  test:
    desc: Run backend and frontend tests.
    deps:
      - test-backend
      - test-front

  test-backend:
    desc: Run Rust unit tests with test DB.
    deps:
      - init-databases
    cmds:
      - '{{.EXEC_LOG}} ACTION "Running migrations..."'
      - |
        {{.DOCKER_COMPOSE}} exec \
          -e CORE_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -e OAUTH_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -e DATABASES_STORE_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -it dust_backend cargo run --bin init_db
      - '{{.EXEC_LOG}} ACTION "Running tests..."'
      - |
        {{.DOCKER_COMPOSE}} exec \
          -e CORE_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -e CORE_DATABASE_READ_REPLICA_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -e OAUTH_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -e DATABASES_STORE_DATABASE_URI=postgres://dev:dev@dust-db:5432/dust_test \
          -it dust_backend cargo test
      - '{{.EXEC_LOG}} DONE "Backend tests executed."'

  test-front:
    desc: Run frontend tests (no watch).
    deps:
      - build-sdk-js
      - init-databases
    cmds:
      - |
        {{.DOCKER_COMPOSE}} exec -e NODE_ENV=test \
          -e FRONT_DATABASE_URI=postgres://test:test@dust_db:5432/dust_front_test \
          dust_front zsh -c "
            cd front && \
            npx tsx admin/db.ts && \
            npm run test -- --watch=false
          "
      - '{{.EXEC_LOG}} DONE "Frontend tests completed."'

  test-front-watch:
    desc: Run frontend tests (watch mode).
    deps:
      - build-sdk-js
      - init-databases
    cmds:
      - |
        {{.DOCKER_COMPOSE}} exec -e NODE_ENV=test \
          -e FRONT_DATABASE_URI=postgres://test:test@dust_db:5432/dust_front_test \
          dust_front zsh -c "
            cd front && \
            npx tsx admin/db.ts && \
            npm run test
          "

  ## DIAGNOSTIC
  ###############

  log-host.env:
    desc: Log host environment.
    cmds:
      - printenv | sort

  log-host.system:
    desc: Log system diagnostics.
    cmds:
      - docker info
      - df -h
      - docker system df

  log-infra:
    desc: Show Dust service logs.
    cmds:
      - '{{.DOCKER_COMPOSE}} logs -f --tail=100 dust'
